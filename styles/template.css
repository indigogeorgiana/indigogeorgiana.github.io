/* .menu {
  width: 25%;
  float: left;
}
.main {
  width: 75%;
  float: left;
}
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}

[class*="col-"] {
  float: left;
  padding: 15px;
  border: 1px solid red;
}
.row::after {
    content: "";
    clear: both;
    display: table;
}
html {
    font-family: "Lucida Sans", sans-serif;
}
.header {
    background-color: #9933cc;
    color: #ffffff;
    padding: 15px;
}
.menu ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}
.menu li {
    padding: 8px;
    margin-bottom: 7px;
    background-color :#33b5e5;
    color: #ffffff;
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}
.menu li:hover {
    background-color: #0099cc;
}
/* For desktop: 
.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}
/* For mobile phones: */
/* [class*="col-"] {
  width: 100%;
}
@media only screen and (min-width: 768px) { */
  /* For desktop: 
  .col-1 {width: 8.33%;}
  .col-2 {width: 16.66%;}
  .col-3 {width: 25%;}
  .col-4 {width: 33.33%;}
  .col-5 {width: 41.66%;}
  .col-6 {width: 50%;}
  .col-7 {width: 58.33%;}
  .col-8 {width: 66.66%;}
  .col-9 {width: 75%;}
  .col-10 {width: 83.33%;}
  .col-11 {width: 91.66%;}
  .col-12 {width: 100%;}
}
@media only screen and (max-width: 768px) {
    /* For mobile phones: 
    [class*="col-"] {
        width: 100%;
    }
} <div class="row">
  <div class="col-3">...</div> <!-- 25% -->
  <div class="col-9">...</div> <!-- 75% -->
</div> */
/* DIV POSSIBLE IDEAS
<div class="w3-row-padding">
  <div class="w3-third">
    <h2>London</h2>
    <p>London is the capital city of England.</p>
    <p>It is the most populous city in the United Kingdom,
    with a metropolitan area of over 13 million inhabitants.</p>
  </div>

  <div class="w3-third">
    <h2>Paris</h2>
    <p>Paris is the capital of France.</p> 
    <p>The Paris area is one of the largest population centers in Europe,
    with more than 12 million inhabitants.</p>
  </div>

  <div class="w3-third">
    <h2>Tokyo</h2>
    <p>Tokyo is the capital of Japan.</p>
    <p>It is the center of the Greater Tokyo Area,
    and the most populous metropolitan area in the world.</p>
  </div>
</div>

You can adjust the gap size by using one of the following properties:
grid-column-gap
grid-row-gap
grid-gap

The grid-column-gap property sets the gap between the columns:
.grid-container {
  display: grid;
  grid-column-gap: 50px;
}

The grid-gap property is a shorthand property for the grid-column-gap and the grid-row-gap properties:
.grid-container {
  display: grid;
  grid-row-gap: 50px;
} 

The grid-gap property can also be used to set both the row gap and the column gap in one value:

.grid-container {
  display: grid;
  grid-gap: 50px;
}

Grid Lines
The line between columns are called column lines.

The line between rows are called row lines.

Refer to line numbers when placing a grid item in a grid container:

Example
Place a grid item at column line 1, and let it end on column line 3:

.item1 {
  grid-column-start: 1;
  grid-column-end: 3;
}

Place a grid item at row line 1, and let it end on row line 3:

.item1 {
  grid-row-start: 1;
  grid-row-end: 3;
}

Example
Make a grid with 4 columns:

.grid-container {
  display: grid;
  grid-template-columns: auto auto auto auto;
}

The grid-template-columns property can also be used to specify the size (width) of the columns.

Example
Set a size for the 4 columns:

.grid-container {
  display: grid;
  grid-template-columns: 80px 200px auto 40px;
}

The value is a space-separated-list, where each value defines the the height of the respective row:

Example
.grid-container {
  display: grid;
  grid-template-rows: 80px 200px;
}

Note: The grid's total width has to be less than the container's width for the justify-content property to have any effect.

Example
.grid-container {
  display: grid;
  justify-content: space-evenly;
}

Example
.grid-container {
  display: grid;
  justify-content: space-around;
}

Example
.grid-container {
  display: grid;
  justify-content: space-between;
}

Example
.grid-container {
  display: grid;
  justify-content: center;
}

Example
.grid-container {
  display: grid;
  justify-content: start;
}

Example
.grid-container {
  display: grid;
  justify-content: end;
}

The align-content Property
The align-content property is used to vertically align the whole grid inside the container.

Note: The grid's total height has to be less than the container's height for the align-content property to have any effect.

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: center;
}

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: space-evenly;
}

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: space-around;
}

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: space-between;
}

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: start;
}

Example
.grid-container {
  display: grid;
  height: 400px;
  align-content: end;
}

Child Elements (Items)
A grid container contains grid items.

By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.

The grid-column Property:
The grid-column property defines on which column(s) to place an item.

You define where the item will start, and where the item will end.

Note: The grid-column property is a shorthand property for the grid-column-start and the grid-column-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many columns the item will span.

Example
Make "item1" start on line 1 and end on line 5:

.item1 {
  grid-column: 1 / 5;
}

Example
Make "item1" start on column 1 and span 3 columns:

.item1 {
  grid-column: 1 / span 3;
}

Example
Make "item2" start on column 2 and span 3 columns:

.item2 {
  grid-column: 2 / span 3;
}

The grid-row Property:
The grid-row property defines on which row to place an item.

You define where the item will start, and where the item will end.

Note: The grid-row property is a shorthand property for the grid-row-start and the grid-row-end properties.

To place an item, you can refer to line numbers, or use the keyword "span" to define how many rows the item will span:

Example
Make "item1" start on row-line 1 and end on row-line 4:

.item1 {
  grid-row: 1 / 4;
}

Example
Make "item1" start on row 1 and span 2 rows:

.item1 {
  grid-row: 1 / span 2;
}


Example
Make "item8" start on row-line 1 and column-line 2, and end on row-line 5 and column line 6:

.item1 {
  grid-area: 1 / 2 / 5 / 6;
}

Example
Make "item8" start on row-line 2 and column-line 1, and span 2 rows and 3 columns:

.item1 {
  grid-area: 2 / 1 / span 2 / span 3;
}

Named grid items can be referred to by the grid-template-areas property of the grid container.

Example
Item1 gets the name "myArea" and spans all five columns in a five columns grid layout:

.item1 {
  grid-area: myArea;
}
.grid-container {
  grid-template-areas: 'myArea myArea myArea myArea myArea';
} 

Each row is defined by apostrophes (' ')

The columns in each row is defined inside the apostrophes, separated by a space.

Note: A period sign represents a grid item with no name.

Example
Let "myArea" span two columns in a five columns grid layout (period signs represent items with no name):

.item1 {
  grid-area: myArea;
}
.grid-container {
  grid-template-areas: 'myArea myArea . . .';
} 

To define two rows, define the column of the second row inside another set of apostrophes:

Example
Make "item1" span two columns and two rows:

.grid-container {
  grid-template-areas: 'myArea myArea . . .' 'myArea myArea . . .';
} 

Example
Name all items, and make a ready-to-use webpage template:

.item1 { grid-area: header; }
.item2 { grid-area: menu; }
.item3 { grid-area: main; }
.item4 { grid-area: right; }
.item5 { grid-area: footer; }

.grid-container {
  grid-template-areas:
    'header header header header header header'
    'menu main main main right right'
    'menu footer footer footer footer footer';
} 

The Order of the Items
The Grid Layout allows us to position the items anywhere we like.

The first item in the HTML code does not have to appear as the first item in the grid.

.item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; } .item1 { grid-area: 1 / 3 / 2 / 4; }
.item2 { grid-area: 2 / 3 / 3 / 4; }
.item3 { grid-area: 1 / 1 / 2 / 2; }
.item4 { grid-area: 1 / 2 / 2 / 3; }
.item5 { grid-area: 2 / 1 / 3 / 2; }
.item6 { grid-area: 2 / 2 / 3 / 3; } 
The grid-area Property
The grid-area property can be used as a shorthand property for the grid-row-start, grid-column-start, grid-row-end and the grid-column-end properties.
/* GRID LAYOUT
<div class="grid-container">
  <div class="grid-item">1</div>
  <div class="grid-item">2</div>
  <div class="grid-item">3</div>
  <div class="grid-item">4</div>
  <div class="grid-item">5</div>
  <div class="grid-item">6</div>
  <div class="grid-item">7</div>
  <div class="grid-item">8</div>
  <div class="grid-item">9</div>
</div>


/* *************MISC HEAD*************/

/* .webdevlogo{
    width: 30rem;
    height: auto;
    border-radius: 55%;
    z-index: 200;
    margin: 20rem;
    border: 3px solid black;
}
.weblettering{
    height: auto;
    border-radius: 55%;
    z-index: 200;

} */

/***************************************************************/
/**MAIN BODY CSS*****/
body {
  background-color: white;
  font-family: 'Lato', sans-serif;
  width: 100%;
}

/****************************************************************/
/* MAIN HEADER TAGS */
h1 {
  margin-top: 0.1rem;
  font-size: 3rem;
  padding: 1rem 0.4rem 0 3rem;
}

h2 {
  margin-top: 0;
  font-size: 2rem;
  letter-spacing: 0.03rem;
}

h3 {
  font-size: 1.8rem;
  letter-spacing: 0.03rem;
  padding-top: 4rem;
  margin-bottom: 0;
}

h4 {
  font-size: 2rem;
  margin-bottom: 0;
}

h5 {
  font-size: 1.5rem;
  margin: 1rem 0 0.5rem 0;
}

header {
width: 100%;
position: fixed;
top: 0;
left: 0;
  z-index: -5;
  display: inline-block;
  background-color: white; 
}

#left-head {
  width: 40%;
  float: left;
  vertical-align: middle;
  border-bottom: 3rem;
  padding: 3rem;
}

/* #left-head img {
  width: 15rem;
} */

#right-head {
  width: 50%;
  height: 9rem;
  float: right;
  padding: 2rem;
}

/***************************************************************/
/***NAVIGATION*****/
.nav-image {
  width: 86rem;
  height: 30rem;
  z-index: 50;
  padding-top: 7rem;
  padding-bottom: 2rem;
}

.left-nav {
  width: 50%;
  float: left;
  vertical-align: middle;
  padding: 1rem;
}

.right-nav {
  width: 50%;
  float: right;
  vertical-align: middle;
  padding: 2rem;
}

/* nav:hover ul {
  display: block;
  z-index: 200;
}

nav ul, nav:active ul { 
  display: none;
  position: absolute;
  list-style: none;
  text-transform: uppercase;
  font-weight: bold;
  padding: 0;
  background: #fff;
  border: 0.2rem solid black;
  right: 2.5rem;
  top: 6.5rem;
  width: 40%;   
}

nav li {
  font-size: 1.2rem;
  text-align: center;
  width: 100%;
  padding: 2rem 0;
  margin: 0;
} */

/* #navicon {
  width: 5rem;
  height: 5rem;
  background: url("../images/menu-icon.png") no-repeat center center;
  float: right;
  z-index: 100;
}

a:hover#navicon {
background-color: grey;
}

nav:hover ul {
  display: block;
  z-index: 200;
}

nav ul, nav:active ul { 
  display: none;
  position: absolute;
  list-style: none;
  text-transform: uppercase;
  font-weight: bold;
  padding: 0;
  background: #fff;
  border: 0.2rem solid black;
  right: 2.5rem;
  top: 6.5rem;
  width: 40%;   
}

nav li {
  font-size: 1.2rem;
  text-align: center;
  width: 100%;
  padding: 2rem 0;
  margin: 0;
}

.current {
  color: white;
}

/************************************************************/
/**MEDIA**/
/* Larger than mobile */
@media only screen and (min-width: 400px) {

  .container {
      position: relative;
      width: 100%;
      margin: auto;
  }
}

/* Larger than tablet */
@media only screen and (min-width: 400px) {

  .container {
      position: relative;
      width: 100%;
      margin: auto;
  }

}

/* Larger than desktop */
@media only screen and (min-width: 1000px) {
  .container {
      position: relative;
      width: 1000px;
      margin: auto;
  }

  #main {
      width: 100%;
  }

  #blog-title {
      width: 70%;
  }

  .blog-content {
      width: 70%;
  }
}

/* Larger than Desktop HD */
@media only screen and (min-width: 1200px) {
  .container {
      position: relative;
      width: 1200px;
      margin: auto;
  }

  #main {
      width: 100%;
  }

  #blog-title {
      width: 70%;
  }

  .blog-content {
      width: 70%;
  }
}

/* Medium screens */
@media all and (min-width: 37.500em) {
.aside { flex: 1 auto; }
}

/* Large screens */
@media all and (min-width: 50.000em) {

.main { flex: 2 0em; }
.aside-1 { order: 1; }
.main    { order: 2; }
.aside-2 { order: 3; }
.footer  { order: 4; }
} 

.container  {
  display: inline;
}
.container1 {   
  display: center; 
  flex-grow: 1;
}
.container2 { 
  flex-wrap: wrap;  
  flex-grow: 1;
}
.container-fluid {   
  display: inline-block;
}
.flex-container > * {
  padding: 0.938em;
  -webkit-flex: 1 100%;
  flex: 1 100%;
} 
.container {
  max-width: 100%;
}

a {
color: black;
  text-decoration: none;
}

a:hover {
  color: black;
}

/* ***********************************************************
/* BLOG MAIN */
/*
#blog-main {
  width: 100%;
  height: 25rem;
  margin-top: 8rem;
  background: url("../images/workoffice.jpg") no-repeat center top;
}
#blogs h4, #blogs h5 {
  padding: 0 1rem 0 1rem;

}

#blogs p {
  font-size: 1.3rem;
  margin: 1rem 0 1rem 0;
  padding: 0 1rem 0 1rem;
}

#blogs img {
  width: 100%;
  height: auto;
  padding: 0 1rem 0 1rem;
  overflow: hidden;
  margin-top: 0;
  position: relative;
}

#blogs {
  margin-top: 0;
  margin-bottom: 4rem;
}

#blog-title {
  width: 90%;
  height: 15rem;
  margin: auto;
  position: relative;
  top: 10rem;
}

#blog-main h5, #blog-main h6 {
  text-align: left;
  color: white;
}

#blog-main h5 {
  position: absolute;
  bottom: 10rem;
  font-size: 1.7rem;
}

#blog-main h6 {
  position: absolute;
  bottom: 0;
  font-size: 3rem;
  line-height: 4.5rem;
  margin-bottom: 1rem;
}
/***************************************************/
/* BLOG CONTENT */
/* 
.blog-content {
  width: 90%;
  margin: auto;
  margin-top: 3rem;
  padding: 0;
}
.blog-content p {
  margin: 1rem 0 1rem 0;
}

.content {
  margin-bottom: 5rem;
} */

/* .blog-image {
  display: block;
  margin: auto;
  padding: 2rem 1rem 0 1rem;
  width: 100%;
}

#box-image {
  width: 100%;
  margin-bottom: 2rem;
}

.wireframes {
  display: block;
  width: 75%;
  margin: auto;
  padding-bottom: 1rem;
}

.blog-content ol, .blog-content ul {
  padding: 0 1rem 0 1rem;
  margin-bottom: 0;
}

.blog-content li {
  list-style-position: outside;
  margin-left: 1rem;
}  */

/*************************************************/

/****PAGE FOOTER****/
.social-footer {
text-align: center;
font-weight: bold;
  position: bottom;
left: 1em;
bottom: 1em;
width: 100%;
  color: black;  
  font-size: 1.1em;
}

.social-bar {
  width: 100%; /* Set a specific width*/
  opacity: 2;
  color: black;
  align-content: center;
  display:center;
}
.social-bar a {    
  display: inline-flex; /* Make the links appear below each other instead of side-by-side*/
  text-align: center; /* Center-align text*/
  padding: 0.3em 0.3em 0.3em 0.3em; /* Add some padding*/
  transition: all 0.3s ease; /* Add transition for hover effects*/
  color:black; /* White text color*/
  font-size: 2em; /* Increased font-size*/
}
.social-bar a:hover {
  background-color: #4CAF50 ; /* Add a hover color */
}
.active {
  background-color: rgb(119, 76, 175); /* Add an active/current color */
}

.github-square, .google-square, .linkedin-square, .code-camp, .twitter-square{
  color: black;
}
/*********************************************************************/
/****DROP DOWN BUTTONS****/
.dropbtn {
  background-color: #3498DB;
  color: white;
  padding: 16px;
  font-size: 16px;
  border: none; 
  cursor: pointer;
}

/* Dropdown button on hover & focus */
.dropbtn:hover, .dropbtn:focus {
  background-color: #2980B9;
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
  float: right;
  padding: 0.4rem;
  border-right: 1rem;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f1f1f1;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {
  background-color: #ddd
}

/* Show the dropdown menu (use JS to add this class to the .dropdown-content container when the user clicks on the dropdown button) */
.show {
  display:block;
}
* {
  box-sizing: border-box;
  border: 0.5px solid transparent;
}

/********************************************************/
/****ROWS***
.row-one {
  width: 100%; 
  margin-top: 1em;   
  padding: 0em 0.5em 0em 1em;
}

.row-two { 
  width: 50%;
  margin-top: 1em;
  padding:  0em 0.5em 0em 1em;
}
.row-three {
  width: 25%;
  padding:  0em 0.5em 0em 1em;
}
.row-four {
  width:15%;
  padding:  0em 0.5em 0em 1em;
}

/****************************************************/
/****COLUMNS****
.one-column {
  width: 8.33%;
}

.three-columns {
  width: 25%;
}

.six columns {
  width: 50%;
  border: 2em 0em 0em 2em;
}

.twelve columns{
  width: 100%;
  display: center;   
} */

/*************************END******************************** */
